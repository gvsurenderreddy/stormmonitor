// Generated by CoffeeScript 1.9.3
var EventEmitter, StormMonitor, actual, current, exec, fs, measureCPU, measureMemory, measurePID, os, past, pids, process,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

os = require('os');

exec = require('child_process').exec;

fs = require('fs');

EventEmitter = require('events').EventEmitter;

past = [];

current = [];

actual = [];

pids = [];

process = [];

measureMemory = function() {
  var count, data, i, j, len, memory, output, tmparr, tmpvars;
  data = fs.readFileSync("/proc/meminfo");
  String(output = data.toString());
  tmparr = output.split("\n");
  memory = {};
  count = 1;
  for (j = 0, len = tmparr.length; j < len; j++) {
    i = tmparr[j];
    tmpvars = i.split(/[ ]+/);
    if (tmpvars[0] === "MemTotal:") {
      memory.total = tmpvars[1];
    }
    if (tmpvars[0] === "MemFree:") {
      memory.free = tmpvars[1];
      return memory;
    }
    count++;
  }
};

measureCPU = function() {
  var cpu, data, output, tmparr;
  cpu = {};
  data = fs.readFileSync("/proc/stat");
  String(output = data.toString());
  tmparr = output.split("\n");
  current = tmparr[0].split(/[ ]+/);
  if (past[0] == null) {
    past = current;
    return;
  }
  actual[0] = current[1] - past[1];
  actual[1] = current[2] - past[2];
  actual[2] = current[3] - past[3];
  actual[3] = current[4] - past[4];
  actual[4] = current[5] - past[5];
  past = current;
  cpu.total = actual[0] + actual[1] + actual[2] + actual[3] + actual[4];
  cpu.idle = (actual[3] / cpu.total) * 100;
  cpu.used = (actual[0] + actual[1] + actual[2] + actual[4]) / cpu.total * 100;
  return cpu;
};

measurePID = function(pid) {
  var count, data, i, j, len, output, result, tmparr, tmpvars;
  result = {};
  result.pid = pid;
  data = fs.readFileSync("/proc/" + pid + "/stat");
  String(output = data.toString());
  tmpvars = output.split(/[ ]+/);
  result.cpuused = Number(tmpvars[15]) + Number(tmpvars[16]);
  data = fs.readFileSync("/proc/" + pid + "/status");
  String(output = data.toString());
  tmparr = output.split("\n");
  count = 1;
  for (j = 0, len = tmparr.length; j < len; j++) {
    i = tmparr[j];
    tmpvars = i.split(/[ ]+/);
    if (tmpvars[0] === "VmSize:") {
      result.memory = tmpvars[1];
      return result;
    }
    count++;
  }
  return result;
};

StormMonitor = (function(superClass) {
  extend(StormMonitor, superClass);

  function StormMonitor(interval) {
    this.status = bind(this.status, this);
    this.addpid = bind(this.addpid, this);
    this.run = bind(this.run, this);
    this.monitor = bind(this.monitor, this);
    this.timeout = interval;
  }

  StormMonitor.prototype.monitor = function() {
    var j, len, pid, result;
    this.pidresults = [];
    this.memory = measureMemory();
    this.cpu = measureCPU();
    for (j = 0, len = pids.length; j < len; j++) {
      pid = pids[j];
      this.pidresults.push(measurePID(pid));
    }
    result = {};
    result.system = {};
    result.pids = [];
    result.system.memory = this.memory;
    result.system.cpu = this.cpu;
    result.pids = this.pidresults;
    return this.emit('results', result);
  };

  StormMonitor.prototype.run = function() {
    this.monitor();
    return setInterval(this.monitor, this.timeout);
  };

  StormMonitor.prototype.addpid = function(pid) {
    return pids.push(pid);
  };

  StormMonitor.prototype.status = function() {
    return {
      cpu: this.cpu,
      memory: this.memory
    };
  };

  return StormMonitor;

})(EventEmitter);

module.exports = StormMonitor;
